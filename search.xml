<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring Boot中使用Swagger2构建RESTful APIS</title>
      <link href="/2018/04/16/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Swagger2%E6%9E%84%E5%BB%BARESTful-APIS.html"/>
      <url>/2018/04/16/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Swagger2%E6%9E%84%E5%BB%BARESTful-APIS.html</url>
      <content type="html"><![CDATA[<h4 id="Swagger2简介"><a href="#Swagger2简介" class="headerlink" title="Swagger2简介"></a><strong>Swagger2简介</strong></h4><p>本次教程是Spring Boot中使用Swagger2构建RESTful APIS<br>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。（如图）</p><a id="more"></a><p><img src="http://img.blog.csdn.net/20171113125648734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Spring Boot中使用Swagger2构建RESTful APIS效果图"></p><p>Swagger除了查看接口功能外，还提供了调试测试功能。（如图）<br>新增博客</p><p><img src="http://img.blog.csdn.net/20171113135922229?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="新增"></p><p><img src="http://img.blog.csdn.net/20171113135932356?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="新增"></p><p>查看所有博客</p><p><img src="http://img.blog.csdn.net/20171113135951247?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="查看所有"></p><p>修改博客</p><p><img src="http://img.blog.csdn.net/20171113140003773?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="修改"></p><p>查看单个博客</p><p><img src="http://img.blog.csdn.net/20171113140219853?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="查看单个"></p><p><img src="http://img.blog.csdn.net/20171113140019135?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="查看单个"></p><p>删除博客</p><p><img src="http://img.blog.csdn.net/20171113140552417?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="输入要删除的id"></p><p><img src="http://img.blog.csdn.net/20171113140600519?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="删除成功"></p><p><img src="http://img.blog.csdn.net/20171113140613843?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="查看是否删除"></p><h4 id="SpringBoot整合Swagger2"><a href="#SpringBoot整合Swagger2" class="headerlink" title="SpringBoot整合Swagger2"></a><strong>SpringBoot整合Swagger2</strong></h4><p><strong>配置pom.xml,引入Swagger2架包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在RunApplication.java同级下创建Swagger2.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.*;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.*;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yando on 2017/11/10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIS"</span>)</span><br><span class="line">                .description(<span class="string">"HTTP对外开放接口"</span>)</span><br><span class="line">                .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://blog.csdn.net/wenteryan"</span>)</span><br><span class="line">                .license(<span class="string">"Spring Boot 入门+实战（提供源码哟）"</span>)</span><br><span class="line">                .licenseUrl(<span class="string">"http://blog.csdn.net/column/details/15021.html"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建实体类 Blog.java（略）</strong> </p><p><strong>创建ABlogController.java</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan.controller.admin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javazhan.domain.Blog;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParams;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yando on 2017/11/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = <span class="meta-string">"/admin/blog"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABlogController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    static Map&lt;<span class="built_in">Long</span>, Blog&gt; blogs = Collections.synchronizedMap(new HashMap&lt;<span class="built_in">Long</span>, Blog&gt;()) ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"后台管理查询所有博客"</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">""</span>, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Blog&gt; getBlogList() &#123;</span><br><span class="line">        List&lt;Blog&gt; list = new ArrayList&lt;Blog&gt;(blogs.values()) ;</span><br><span class="line">        <span class="keyword">return</span> list ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"新增博客"</span>, notes = <span class="meta-string">"根据博客对象"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"blog"</span>, value = <span class="meta-string">"博客信息实体blog"</span>, required = true, dataType = <span class="meta-string">"Blog"</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/add"</span>, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> Map addBlog(<span class="meta">@RequestBody</span> Blog blog) &#123;</span><br><span class="line">        blogs.put(blog.getId(), blog) ;</span><br><span class="line">        Map map = new HashMap() ;</span><br><span class="line">        map.put(<span class="string">"message"</span>, <span class="string">"新增成功"</span>) ;</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"0000"</span>) ;</span><br><span class="line">        <span class="keyword">return</span> map ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"获取博客信息"</span>, notes = <span class="meta-string">"根据ID获取博客对象"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"博客ID"</span>, required = true, paramType=<span class="meta-string">"path"</span>, dataType = <span class="meta-string">"Long"</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> Blog getBlogById(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        Blog blog = new Blog() ;</span><br><span class="line">        blog = blogs.<span class="keyword">get</span>(id) ;</span><br><span class="line">        <span class="keyword">return</span> blog ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"修改博客信息"</span>, notes = <span class="meta-string">"根据传过来的博客对象修改博客信息"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"博客ID"</span>, required = true, paramType=<span class="meta-string">"path"</span>, dataType = <span class="meta-string">"Long"</span>)</span>,</span><br><span class="line">            <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"blog"</span>, value = <span class="meta-string">"博客信息实体blog"</span>, required = true, dataType = <span class="meta-string">"Blog"</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/&#123;id&#125;"</span>, method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> Map updateBlog(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id, <span class="meta">@RequestBody</span> Blog blog) &#123;</span><br><span class="line">        Blog b = blogs.<span class="keyword">get</span>(blog.getId()) ;</span><br><span class="line">        b.setId(blog.getId()) ;</span><br><span class="line">        b.setName(blog.getName()) ;</span><br><span class="line">        blogs.put(b.getId(), b) ;</span><br><span class="line">        Map map = new HashMap() ;</span><br><span class="line">        map.put(<span class="string">"message"</span>, <span class="string">"修改成功"</span>) ;</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"0000"</span>) ;</span><br><span class="line">        <span class="keyword">return</span> map ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = <span class="meta-string">"删除博客信息"</span>, notes = <span class="meta-string">"根据ID删除博客对象"</span>)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = <span class="meta-string">"id"</span>, value = <span class="meta-string">"博客ID"</span>, required = true, paramType=<span class="meta-string">"path"</span>, dataType = <span class="meta-string">"Long"</span>)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/&#123;id&#125;"</span>, method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="keyword">public</span> Map deleteBlog(<span class="meta">@PathVariable</span> <span class="built_in">Long</span> id) &#123;</span><br><span class="line">        blogs.remove(id) ;</span><br><span class="line">        Map map = new HashMap() ;</span><br><span class="line">        map.put(<span class="string">"message"</span>, <span class="string">"删除成功"</span>) ;</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"0000"</span>) ;</span><br><span class="line">        <span class="keyword">return</span> map ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行RunApplication.java<br>访问地址：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></p><p><img src="http://img.blog.csdn.net/20171113125648734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Spring Boot中使用Swagger2构建RESTful APIS效果图"></p><p>更多教程请参考<a href="http://springfox.github.io/springfox/docs/current/#introduction" target="_blank" rel="noopener">官方文档</a></p><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><strong>源码下载</strong></h4><p><a href="https://github.com/yandongquan/SpringBootInstance/tree/master/SpringBootSwagger" target="_blank" rel="noopener">Spring Boot中使用Swagger2构建RESTful APIS（含源码）</a></p>]]></content>
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot进阶之统一异常处理</title>
      <link href="/2018/04/13/SpringBoot%E8%BF%9B%E9%98%B6%E4%B9%8B%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html"/>
      <url>/2018/04/13/SpringBoot%E8%BF%9B%E9%98%B6%E4%B9%8B%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html</url>
      <content type="html"><![CDATA[<h4 id="浅谈异常处理"><a href="#浅谈异常处理" class="headerlink" title="浅谈异常处理"></a><strong>浅谈异常处理</strong></h4><p>在J2EE项目的开发中，不管是对底层的数据库操作过程，还是业务层的处理过程，还是控制层的处理过程，都不可避免会遇到各种可预知的、不可预知的异常需要处理。每个过程都单独处理异常，系统的代码耦合度高，工作量大且不好统一，维护的工作量也很大。 所以我们会进行统一异常处理，进而去避免这些问题。</p><h4 id="默认异常处理"><a href="#默认异常处理" class="headerlink" title="默认异常处理"></a><strong>默认异常处理</strong></h4><p>Spring Boot提供了一个默认的映射：/error，当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。</p><a id="more"></a><p>启动该应用，访问一个不存在的URL。</p><p><img src="http://img.blog.csdn.net/20170905163307912?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="错误页面"></p><h4 id="统一异常处理，场景1-返回HTML页面"><a href="#统一异常处理，场景1-返回HTML页面" class="headerlink" title="统一异常处理，场景1 返回HTML页面"></a><strong>统一异常处理，场景1 返回HTML页面</strong></h4><p>编写全局异常处理类 GlobalExceptionHandler.java</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过使用@ControllerAdvice定义统一的异常处理类，而不是在每个Controller中逐个定义。</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ERROR_VIEW = <span class="string">"error"</span>;</span><br><span class="line">    <span class="comment">// @ExceptionHandler用来定义函数针对的异常类型，最后将Exception对象和请求URL映射到error.html中</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception.<span class="keyword">class</span>)</span><br><span class="line">    <span class="keyword">public</span> ModelAndView defaultErrorHandler(HttpServletRequest request, Exception e) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView() ;</span><br><span class="line">        mav.addObject(<span class="string">"errorname"</span>, <span class="string">"统一异常处理页面"</span>) ;</span><br><span class="line">        mav.addObject(<span class="string">"exception"</span>, e) ;</span><br><span class="line">        mav.addObject(<span class="string">"url"</span>, request.getRequestURL()) ;</span><br><span class="line">        mav.setViewName(DEFAULT_ERROR_VIEW) ;</span><br><span class="line">        <span class="keyword">return</span> mav ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写异常类 ExceptionController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/nException"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">nException</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"这里有个错误异常"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写error.html页面</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning alert-dismissible"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;errorname &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;exception.message &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;url &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>启动应用，访问：<a href="http://localhost:8080/nException" target="_blank" rel="noopener">http://localhost:8080/nException</a></p><p><img src="http://img.blog.csdn.net/20170905163333045?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="统一异常处理页面"></p><h4 id="统一异常处理，场景2-返回JSON页面"><a href="#统一异常处理，场景2-返回JSON页面" class="headerlink" title="统一异常处理，场景2 返回JSON页面"></a><strong>统一异常处理，场景2 返回JSON页面</strong></h4><p>编写ErrorInfo.java实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorInfo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer OK = <span class="number">0000</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer ERROR = <span class="number">9999</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code ;</span><br><span class="line">    <span class="keyword">private</span> String message ;</span><br><span class="line">    <span class="keyword">private</span> String url ;</span><br><span class="line">    <span class="keyword">private</span> T data ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在全局异常处理类 GlobalExceptionHandler.java编写jsonErrorHandler方法</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@ExceptionHandler(value = MyException.class)</span><br><span class="line">@ResponseBody</span><br><span class="line">public ErrorInfo<span class="variable">&lt;String&gt;</span> jsonErrorHandler(HttpServletRequest request, MyException e) throws Exception &#123;</span><br><span class="line">    ErrorInfo<span class="variable">&lt;String&gt;</span> r = new ErrorInfo<span class="variable">&lt;&gt;</span>() ;</span><br><span class="line">    r.<span class="built_in">set</span>Message(e.getMessage()) ;</span><br><span class="line">    r.<span class="built_in">set</span>Code(ErrorInfo.ERROR) ;</span><br><span class="line">    r.<span class="built_in">set</span>Data(<span class="string">"Some Data"</span>) ;</span><br><span class="line">    r.<span class="built_in">set</span>Url(request.getRequestURL().<span class="keyword">to</span>String()) ;</span><br><span class="line">    return r ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ExceptionController.java新增jsonException方法<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/jsonException"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="function">String <span class="title">jsonException</span><span class="params">()</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"这里有个错误异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动应用，访问：<a href="http://localhost:8080/jsonException" target="_blank" rel="noopener">http://localhost:8080/jsonException</a></p><p><img src="http://img.blog.csdn.net/20170905164335250?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="返回JSON页面"></p><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><strong>源码下载</strong></h4><p><a href="https://github.com/yandongquan/SpringBootInstance/tree/master/SpringBootException" target="_blank" rel="noopener">SpringBoot进阶之统一异常处理（含源码）</a></p>]]></content>
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot自定义favicon.ico</title>
      <link href="/2018/04/12/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89favicon-ico.html"/>
      <url>/2018/04/12/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89favicon-ico.html</url>
      <content type="html"><![CDATA[<h3 id="默认的Favicon"><a href="#默认的Favicon" class="headerlink" title="默认的Favicon"></a><strong>默认的Favicon</strong></h3><p>Spring Boot提供了一个默认的Favicon，每次访问应用的时候都能看到。</p><p><img src="http://img.blog.csdn.net/20180126114007899?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="默认的Favicon"></p><h3 id="关闭Favicon"><a href="#关闭Favicon" class="headerlink" title="关闭Favicon"></a><strong>关闭Favicon</strong></h3><p>我们可以在application.properties中设置关闭Favicon，默认为开启。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.mvc</span><span class="selector-class">.favicon</span><span class="selector-class">.enable</span>=false</span><br></pre></td></tr></table></figure><a id="more"></a><p>或在application.yml中设置关闭Favicon</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  mvc:</span></span><br><span class="line"><span class="attr">    favicon:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="设置自己的Favicon"><a href="#设置自己的Favicon" class="headerlink" title="设置自己的Favicon"></a><strong>设置自己的Favicon</strong></h3><p>若需要设置自己的Favicon，则只需将自己的favicon.ico文件放置在类路径根目录、类路径META-INF/resources/下、类路径resources/下、类路径static/下或类路径public/下。</p><p>这里将favicon.ico放置在src/main/resources/static下。</p><p><img src="http://img.blog.csdn.net/20180126114340435?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a><strong>源码分析</strong></h3><p>application.properties<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.mvc</span><span class="selector-class">.favicon</span><span class="selector-class">.enabled</span>=false</span><br></pre></td></tr></table></figure></p><p>IndexController .java<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/index"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String index(Model model) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>,<span class="string">"SpringBootFavicon"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>IndexRestController .java<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexRestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = <span class="meta-string">"/indexRest"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String index() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"indexRest"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RunApplication .java<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunApplication</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(RunApplication.<span class="keyword">class</span>, args) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行RunApplication,java</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a><strong>效果图</strong></h3><p>访问Rest请求</p><p><img src="http://img.blog.csdn.net/20180126114415775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="访问Rest请求"></p><p>访问页面</p><p><img src="http://img.blog.csdn.net/20180126114256857?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="访问页面"></p><p>访问错误请求<br><img src="http://img.blog.csdn.net/20180126114400072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="访问错误请求"></p><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><strong>源码下载</strong></h3><p><a href="https://github.com/yandongquan/SpringBootInstance/tree/master/SpringBootFavicon" target="_blank" rel="noopener">SpringBoot自定义favicon.ico(含源码)</a></p><p><a href="https://github.com/yandongquan/SpringBootInstance" target="_blank" rel="noopener">SpringBoot 入门+实战系列源码)</a></p>]]></content>
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot进阶之访问数据库</title>
      <link href="/2018/04/11/SpringBoot%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93.html"/>
      <url>/2018/04/11/SpringBoot%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
      <content type="html"><![CDATA[<p>本文介绍在Spring Boot基础下配置数据源和通过JdbcTemplate编写数据访问的示例。</p><p>简单介绍一下<br>@Controller：修饰class，用来创建处理http请求的对象<br>@RestController：Spring4之后加入的注解，原来在@Controller中返回json需要@ResponseBody来配合，如果直接用@RestController替代@Controller就不需要再配置@ResponseBody，默认返回json格式。<br>@RequestMapping：配置url映射</p><h4 id="数据源配置"><a href="#数据源配置" class="headerlink" title="数据源配置"></a><strong>数据源配置</strong></h4><a id="more"></a><p>首先，为了连接数据库需要引入jdbc支持，在pom.xml中引入如下配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以MySQL数据库为例，先引入MySQL连接的依赖包，在pom.xml中加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置数据源信息"><a href="#配置数据源信息" class="headerlink" title="配置数据源信息"></a><strong>配置数据源信息</strong></h4><p>在application.yml配置数据源信息<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">  <span class="attribute">datasource</span>:</span><br><span class="line">    <span class="attribute">url</span>: <span class="attribute">jdbc</span>:<span class="attribute">mysql</span>:<span class="comment">//localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attribute">username</span>: root</span><br><span class="line">    <span class="attribute">password</span>: root</span><br><span class="line">    <span class="attribute">driver-class-name</span>: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></p><h4 id="使用JdbcTemplate操作数据库"><a href="#使用JdbcTemplate操作数据库" class="headerlink" title="使用JdbcTemplate操作数据库"></a><strong>使用JdbcTemplate操作数据库</strong></h4><p>编写实体类Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id ;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="keyword">private</span> String address ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写StudentService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javazhan.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增一个学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Student student)</span> </span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除一个学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查出所有学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">getAllStudent</span><span class="params">()</span> </span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查出学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Student <span class="title">getStudentById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Id更新一个学生</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateStudentById</span><span class="params">(Student student)</span> </span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写实现类StudentServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.ResultSetExtractor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javazhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> com.javazhan.service.StudentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate  ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into student(name, age, address) value(?,?,?)"</span>, student.getName(), student.getAge(), student.getAddress()) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">"delete from student where id = ?"</span>, id) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAllStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(<span class="string">"select * from student"</span>, <span class="keyword">new</span> RowMapper()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                Student student = <span class="keyword">new</span> Student();</span><br><span class="line">                student.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">                student.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">                student.setAge(rs.getInt(<span class="string">"age"</span>));</span><br><span class="line">                student.setAddress(rs.getString(<span class="string">"address"</span>));</span><br><span class="line">                <span class="keyword">return</span> student;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;) ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> (Student) jdbcTemplate.query(<span class="string">"select * from student where id=?"</span>, <span class="keyword">new</span> ResultSetExtractor() &#123;  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> Student <span class="title">extractData</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;  </span><br><span class="line">                <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">                    student.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">                    student.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">                    student.setAge(rs.getInt(<span class="string">"age"</span>));</span><br><span class="line">                    student.setAddress(rs.getString(<span class="string">"address"</span>));</span><br><span class="line">                    <span class="keyword">return</span> student ;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span> ;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;, id);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStudentById</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        jdbcTemplate.update(<span class="string">"update student set name=?, age=?, address=? where id =?"</span>, student.getName(), student.getAge(), student.getAddress(),student.getId()) ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们尝试使用Spring MVC来实现一组对Student对象操作的RESTful API，配合注释详细说明在Spring MVC中如何映射HTTP请求、如何传参、如何编写单元测试。<br>| 请求类型 | URL    | 功能说明 |<br>| ————- |:————-| —–|<br>| GET | /student | 查询所有学生 |<br>| POST | /student | 新增一个学生 |<br>| GET | /student/id | 根据id查询一个学生 |<br>| PUT | /student/id | 根据id更新一个学生 |<br>| DELETE | /student/id | 根据id删除一个学生 |</p><p>编写StudentRestController .java<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan.web.rest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.ModelAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javazhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> com.javazhan.service.StudentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"student"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentRestController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService stuService ;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查出所有学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">"/"</span>, method=RequestMethod.GET)</span> </span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; getAllStudent() &#123;</span><br><span class="line">        <span class="keyword">return</span> stuService.getAllStudent() ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查出学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> Student getStudentById(<span class="meta">@PathVariable</span> Integer id) &#123;</span><br><span class="line">        <span class="keyword">return</span> stuService.getStudentById(id) ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span></span><br><span class="line">    <span class="keyword">public</span> String deleteById(<span class="meta">@PathVariable</span> Integer id) &#123;</span><br><span class="line">        stuService.deleteById(id) ;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增一个学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">"/"</span>, method=RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String create(<span class="meta">@ModelAttribute</span> Student student) &#123;</span><br><span class="line">        stuService.create(student) ;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据Id更新一个学生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value=<span class="meta-string">"/"</span>, method=RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> String updateStudentById(<span class="meta">@ModelAttribute</span> Student student) &#123;</span><br><span class="line">        stuService.updateStudentById(student) ;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写测试RestTest.java</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">package com.java.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;</span><br><span class="line"><span class="keyword">import</span> static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;</span><br><span class="line"><span class="keyword">import</span> static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;</span><br><span class="line"><span class="keyword">import</span> static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MvcResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.RequestBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javazhan.RunApplication;</span><br><span class="line"></span><br><span class="line">@<span class="type">RunWith</span>(<span class="type">SpringRunner</span>.<span class="keyword">class</span>)</span><br><span class="line">@<span class="type">SpringBootTest</span>(classes=<span class="type">RunApplication</span>.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTest</span> </span>&#123;</span><br><span class="line">    @<span class="type">Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">WebApplicationContext</span> context;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// mock api 模拟http请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">MockMvc</span> mvc; </span><br><span class="line">    </span><br><span class="line">    @<span class="type">Before</span></span><br><span class="line">    <span class="keyword">public</span> void setUp() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">        <span class="comment">//集成Web环境测试（此种方式并不会集成真正的web环境，而是通过相应的Mock API进行模拟测试，无须启动服务器）</span></span><br><span class="line">        mvc = <span class="type">MockMvcBuilders</span>.webAppContextSetup(context).build();</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="type">Test</span></span><br><span class="line">    <span class="keyword">public</span> void testUserController() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">        <span class="type">RequestBuilder</span> request = null ;</span><br><span class="line">        <span class="type">MvcResult</span> mvcResult = null ;</span><br><span class="line">        int status = <span class="number">500</span> ;</span><br><span class="line">        <span class="comment">// 新增学生</span></span><br><span class="line">        request = post(<span class="string">"/student/"</span>).param(<span class="string">"name"</span>, <span class="string">"李四"</span>)</span><br><span class="line">                .param(<span class="string">"age"</span>, <span class="string">"20"</span>)</span><br><span class="line">                .param(<span class="string">"address"</span>, <span class="string">"哈尔滨"</span>) ;</span><br><span class="line">        mvcResult = mvc.perform(request).andReturn() ;  </span><br><span class="line">        status = mvcResult.getResponse().getStatus() ;</span><br><span class="line">        <span class="keyword">if</span>(status==<span class="number">200</span>) &#123;</span><br><span class="line">            <span class="type">String</span> content = mvcResult.getResponse().getContentAsString() ;  </span><br><span class="line">            <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"新增学生："</span>+content) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查出所有学生</span></span><br><span class="line">        request = <span class="keyword">get</span>(<span class="string">"/student/"</span>) ;</span><br><span class="line">        mvcResult = mvc.perform(request).andReturn() ;  </span><br><span class="line">        status = mvcResult.getResponse().getStatus() ;</span><br><span class="line">        <span class="keyword">if</span>(status==<span class="number">200</span>) &#123;</span><br><span class="line">            <span class="type">String</span> content = mvcResult.getResponse().getContentAsString() ;  </span><br><span class="line">            <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"查出所有学生："</span>+content);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据Id查询学生</span></span><br><span class="line">        request = <span class="keyword">get</span>(<span class="string">"/student/1"</span>) ;</span><br><span class="line">        mvcResult = mvc.perform(request).andReturn() ;  </span><br><span class="line">        status = mvcResult.getResponse().getStatus() ;</span><br><span class="line">        <span class="keyword">if</span>(status==<span class="number">200</span>) &#123;</span><br><span class="line">            <span class="type">String</span> content = mvcResult.getResponse().getContentAsString() ;  </span><br><span class="line">            <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"根据Id查询学生："</span>+content) ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据Id更新一个学生</span></span><br><span class="line">        request = put(<span class="string">"/student/"</span>).param(<span class="string">"id"</span>, <span class="string">"5"</span>)</span><br><span class="line">                .param(<span class="string">"name"</span>, <span class="string">"李四5"</span>)</span><br><span class="line">                .param(<span class="string">"age"</span>, <span class="string">"25"</span>)</span><br><span class="line">                .param(<span class="string">"address"</span>, <span class="string">"哈尔滨5"</span>) ;</span><br><span class="line">        mvcResult = mvc.perform(request).andReturn() ;  </span><br><span class="line">        status = mvcResult.getResponse().getStatus() ;</span><br><span class="line">        <span class="keyword">if</span>(status==<span class="number">200</span>) &#123;</span><br><span class="line">            <span class="type">String</span> content = mvcResult.getResponse().getContentAsString() ;  </span><br><span class="line">            <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"根据Id更新一个学生："</span>+content) ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据id删除一个学生</span></span><br><span class="line">        request = delete(<span class="string">"/student/6"</span>) ;</span><br><span class="line">        mvcResult = mvc.perform(request).andReturn() ;  </span><br><span class="line">        status = mvcResult.getResponse().getStatus() ;</span><br><span class="line">        <span class="keyword">if</span>(status==<span class="number">200</span>) &#123;</span><br><span class="line">            <span class="type">String</span> content = mvcResult.getResponse().getContentAsString() ;  </span><br><span class="line">            <span class="type">System</span>.out.<span class="built_in">println</span>(<span class="string">"根据id删除一个学生："</span>+content) ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写RunApplication.java<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunApplication</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(RunApplication.<span class="keyword">class</span>, args) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://img.blog.csdn.net/20170904181825976?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="测试结果"></p><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><strong>源码下载</strong></h4><p><a href="https://github.com/yandongquan/SpringBootInstance/tree/master/SpringBootSQL" target="_blank" rel="noopener">SpringBoot进阶之访问数据库（含源码）</a></p>]]></content>
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> JdbcTemplate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot进阶之模板引擎</title>
      <link href="/2018/04/11/SpringBoot%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.html"/>
      <url>/2018/04/11/SpringBoot%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.html</url>
      <content type="html"><![CDATA[<p>在动态HTML实现上Spring Boot依然可以完美胜任，并且提供了多种模板引擎的默认配置支持，所以在推荐的模板引擎下，我们可以很快的上手开发动态网站。</p><h4 id="模板引擎种类"><a href="#模板引擎种类" class="headerlink" title="模板引擎种类"></a>模板引擎种类</h4><p>Spring Boot提供了默认配置的模板引擎主要有以下几种：</p><a id="more"></a><ul><li>Thymeleaf </li><li>FreeMarker </li><li>Velocity </li><li>Groovy </li><li>Mustache</li></ul><p>当你使用上述模板引擎中的任何一个，它们默认的模板配置路径为：src/main/resources/templates。</p><h4 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h4><p>Thymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。Thymeleaf提供了一个用于整合Spring MVC的可选模块，在应用开发中，你可以使用Thymeleaf来完全代替JSP或其他模板引擎，如Velocity、FreeMarker等。</p><p>在Spring Boot中使用Thymeleaf，只需要引入下面依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p><strong>案例-遍历所有学生信息</strong></p></blockquote><p>效果图：</p><p><img src="http://img.blog.csdn.net/20170904113034792?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="遍历所有学生信息"></p><p><strong>工程结构</strong></p><p>root package结构：com.example.myproject 应用主类Application.java置于rootpackage下，通常我们会在应用主类中做一些框架配置扫描等配置，我们放在root package下可以帮助程序减少手工配置来加载到我们希望被Spring加载的内容</p><ul><li>实体（Entity）与数据访问层（Repository）置于com.example.myproject.domain包下</li><li>逻辑层（Service）置于com.example.myproject.service包下</li><li>Web层（web）置于com.example.myproject.web包下</li></ul><p><img src="http://img.blog.csdn.net/20170904113401513?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="工程结构"></p><p>实体类 Student .java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id ;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age ;</span><br><span class="line">    <span class="keyword">private</span> String address ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>web层 StudentController .java<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.javazhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javazhan.domain.Student;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentController</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    @RequestMapping(<span class="string">"/getStudentList"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStudentList</span><span class="params">(ModelMap <span class="built_in">map</span>)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;Student&gt;() ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">            Student st = <span class="keyword">new</span> Student() ;</span><br><span class="line">            st.setId(i+<span class="number">1</span>) ;</span><br><span class="line">            st.setName(<span class="string">"章三"</span>+(i+<span class="number">1</span>)) ;</span><br><span class="line">            st.setAge(<span class="number">20</span>+i) ;</span><br><span class="line">            st.setAddress(<span class="string">"北京故宫门牌号20"</span>+i) ;</span><br><span class="line">            <span class="built_in">list</span>.add(st) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.addAttribute(<span class="string">"list"</span>, <span class="built_in">list</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span> ;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动类 RunApplication.java<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunApplication</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(RunApplication.<span class="keyword">class</span>, args) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>页面 index.html<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>  <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">meta</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span><span class="tag">&lt;/<span class="name">meta</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><span class="tag">&lt;/<span class="name">meta</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"/css/bootstrap.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"/css/style.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"/css/font-awesome.min.css"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 内容 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-warning"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-size"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 学生所有信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered"</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">                 <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">                 <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">                 <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"list : $</span></span></span><span class="template-variable">&#123;list&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;list.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;list.name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;list.age&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;list.address&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 内容 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/jquery-1.11.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>更多使用技巧请查看<a href="http://www.thymeleaf.org/" target="_blank" rel="noopener">Thymeleaf官网文档</a></p><p>若想修改默认参数配置参考如下，如缓存，编码，修改默认的模板路径等。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable template caching.</span></span><br><span class="line">spring.thymeleaf.<span class="attribute">cache</span>=<span class="literal">true</span> </span><br><span class="line"><span class="comment"># Check that the templates location exists.</span></span><br><span class="line">spring.thymeleaf.<span class="attribute">check-template-location</span>=<span class="literal">true</span> </span><br><span class="line"><span class="comment"># Content-Type value.</span></span><br><span class="line">spring.thymeleaf.<span class="attribute">content-type</span>=text/html </span><br><span class="line"><span class="comment"># Enable MVC Thymeleaf view resolution.</span></span><br><span class="line">spring.thymeleaf.<span class="attribute">enabled</span>=<span class="literal">true</span> </span><br><span class="line"><span class="comment"># Template encoding.</span></span><br><span class="line">spring.thymeleaf.<span class="attribute">encoding</span>=UTF-8 </span><br><span class="line"><span class="comment"># Comma-separated list of view names that should be excluded from resolution.</span></span><br><span class="line">spring.thymeleaf.excluded-view-names= </span><br><span class="line"><span class="comment"># Template mode to be applied to templates. See also StandardTemplateModeHandlers.</span></span><br><span class="line">spring.thymeleaf.<span class="attribute">mode</span>=HTML5 </span><br><span class="line"><span class="comment"># Prefix that gets prepended to view names when building a URL.</span></span><br><span class="line">spring.thymeleaf.<span class="attribute">prefix</span>=classpath:/templates/ </span><br><span class="line"><span class="comment"># Suffix that gets appended to view names when building a URL.</span></span><br><span class="line">spring.thymeleaf.<span class="attribute">suffix</span>=.html  spring.thymeleaf.template-resolver-order= # Order of the template resolver <span class="keyword">in</span> the chain. spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.</span><br></pre></td></tr></table></figure><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><strong>源码下载</strong></h4><p><a href="https://github.com/yandongquan/SpringBootInstance/tree/master/SpringBootTemplate" target="_blank" rel="noopener">SpringBoot进阶之模板引擎源码</a></p>]]></content>
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot入门之Web开发</title>
      <link href="/2018/04/11/SpringBoot%E5%85%A5%E9%97%A8%E4%B9%8BWeb%E5%BC%80%E5%8F%91.html"/>
      <url>/2018/04/11/SpringBoot%E5%85%A5%E9%97%A8%E4%B9%8BWeb%E5%BC%80%E5%8F%91.html</url>
      <content type="html"><![CDATA[<h4 id="静态资源目录"><a href="#静态资源目录" class="headerlink" title="静态资源目录"></a><strong>静态资源目录</strong></h4><p>Spring Boot默认提供静态资源目录位置需置于classpath下，目录名需符合如下规则：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/static</span></span><br><span class="line"><span class="string">/public</span></span><br><span class="line"><span class="string">/resources</span></span><br><span class="line"><span class="string">/META-INF/resources</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p><img src="http://img.blog.csdn.net/20170904100613965?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="public love.gif"></p><p><img src="http://img.blog.csdn.net/20170904100502316?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="静态资源图片gif"></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><strong>配置文件</strong></h4><p>Spring Boot项目使用一个全局的配置文件application.properties或者是application.yml，在resources目录下或者类路径下的/config下，一般我们放到resources下。</p><p>修改tomcat端口配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="attribute">port</span>=8888</span><br></pre></td></tr></table></figure><p>修改Spring MVC拦截路径规则<br>默认Spring MVC拦截路径规则是/，如果要修改成*.html的话，可以在全局配置文件中进行如下设置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="attribute">servlet-path</span>=*.html</span><br></pre></td></tr></table></figure><p>视图解析器配置<br>一样的，Spring Boot也可以通过全局配置文件对视图解析器进行配置：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.mvc</span><span class="selector-class">.view</span><span class="selector-class">.prefix</span>=/WEB-INF/views/</span><br><span class="line">spring<span class="selector-class">.mvc</span><span class="selector-class">.view</span><span class="selector-class">.suffix</span>=.jsp</span><br></pre></td></tr></table></figure><p>日志输出<br>Spring Boot对各种日志框架都做了支持，我们可以通过配置来修改默认的日志的配置：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#设置日志级别</span><br><span class="line">logging<span class="selector-class">.level</span><span class="selector-class">.org</span><span class="selector-class">.springframework</span>=DEBUG</span><br></pre></td></tr></table></figure><p>application.yml</p><p>properties与yml文件在形式上有所差别，yml文件的书写方式比较简洁，类似eclipse中package的flag呈现方式（而properties文件则像Hierarchical方式）。如上面properties文件中的属性配置使用yml文件来写：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">server:</span></span><br><span class="line"><span class="symbol">  port:</span> <span class="number">8888</span></span><br><span class="line">  context-path: /</span><br><span class="line"></span><br><span class="line"><span class="symbol">spring:</span></span><br><span class="line"><span class="symbol">    mvc:</span></span><br><span class="line"><span class="symbol">      view:</span></span><br><span class="line"><span class="symbol">        prefix:</span> /WEB-INF<span class="meta-keyword">/views/</span></span><br><span class="line"><span class="symbol">        suffix:</span> .jsp</span><br><span class="line"></span><br><span class="line"><span class="symbol">logging:</span></span><br><span class="line"><span class="symbol">  level:</span> </span><br><span class="line"><span class="symbol">    org:</span></span><br><span class="line"><span class="symbol">      springframework:</span> debug</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170904101404072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="配置文件"></p><p><img src="http://img.blog.csdn.net/20170904101553043?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="效果图"></p><font color="red">注：推荐使用yml文件在书写，需要注意一个地方：冒号与值中间是存在空格的！</font><p>Spring Boot的全局配置很强大，同时它可以配置的属性也很多，以上只列出几个常用的属性配置，如需查看完整的全局属性配置，请到<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="noopener">spring-boot官方配置文档</a>查看。</p><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><strong>源码下载</strong></h4><p><a href="https://github.com/yandongquan/SpringBootInstance/tree/master/SpringBootWeb" target="_blank" rel="noopener">SpringBoot入门之Web开发源码</a></p>]]></content>
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot入门之HelloWorld</title>
      <link href="/2018/04/11/SpringBoot%E5%85%A5%E9%97%A8%E4%B9%8BHelloWorld.html"/>
      <url>/2018/04/11/SpringBoot%E5%85%A5%E9%97%A8%E4%B9%8BHelloWorld.html</url>
      <content type="html"><![CDATA[<h4 id="SpringBoot是什么？"><a href="#SpringBoot是什么？" class="headerlink" title="SpringBoot是什么？"></a><strong>SpringBoot是什么？</strong></h4><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p><h4 id="SpringBoot优点？"><a href="#SpringBoot优点？" class="headerlink" title="SpringBoot优点？"></a><strong>SpringBoot优点？</strong></h4><a id="more"></a><ol><li>快速构建项目 对主流开发框架的无配置集成 </li><li>项目可独立运行，无须外部依赖Servlet容器（Spring Boot默认自带了一个Tomcat）</li><li>提供运行时的应用监控 </li><li>极大地提高了开发、部署效率 </li><li>提供一系列大型企业级项目的功能性特性</li></ol><h4 id="那就开始我们的HelloWorld"><a href="#那就开始我们的HelloWorld" class="headerlink" title="那就开始我们的HelloWorld"></a><strong>那就开始我们的HelloWorld</strong></h4><p>只需三步就完成我们的HelloWorld</p><p>第一步，我们新建一个Maven项目。给项目添加架包依赖，修改pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.javazhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sb01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步，新建一个类HelloWorldController .java</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">package</span> <span class="selector-tag">com</span><span class="selector-class">.javazhan</span><span class="selector-class">.controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RequestMapping</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.springframework</span><span class="selector-class">.web</span><span class="selector-class">.bind</span><span class="selector-class">.annotation</span><span class="selector-class">.RestController</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">RestController</span></span><br><span class="line"><span class="keyword">public</span> class HelloWorldController &#123;</span><br><span class="line">    </span><br><span class="line">    @<span class="keyword">RequestMapping</span>("/<span class="keyword">helloworld</span>")</span><br><span class="line">    public String helloworld() &#123;</span><br><span class="line">        <span class="selector-tag">return</span> "<span class="selector-tag">HelloWorld</span>!" ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个启动类RunApplication.java</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javazhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunApplication</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main( String[] args )&#123;</span><br><span class="line">        SpringApplication.run(RunApplication.<span class="keyword">class</span>, args) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步，运行RunApplication.java，在浏览器输入地址<a href="http://localhost:8080/helloworld查看结果" target="_blank" rel="noopener">http://localhost:8080/helloworld查看结果</a></p><p><img src="http://img.blog.csdn.net/20170831155736340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VudGVyeWFu/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a><strong>知识点</strong></h4><p>一般Spring Boot的Web应用都有一个xxxApplication类，并使用@SpringBootApplication注解标记，作为该web应用的加载入口。此外，还需要在main方法中(可以是任意一个类)使用SpringApplication.run(xxxApplication.class, args)来启动该web应用</p><h4 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a><strong>源码下载</strong></h4><p><a href="https://github.com/yandongquan/SpringBootInstance/tree/master/SpringBootHelloWorld" target="_blank" rel="noopener">SpringBoot入门之HelloWorld源码</a></p>]]></content>
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式系列1 工厂模式</title>
      <link href="/2018/04/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%971-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"/>
      <url>/2018/04/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%971-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html</url>
      <content type="html"><![CDATA[<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><a id="more"></a><p>1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。<br>2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。<br>3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</p><h4 id="五种工厂模式"><a href="#五种工厂模式" class="headerlink" title="五种工厂模式"></a>五种工厂模式</h4><h5 id="1）简单工厂（静态）"><a href="#1）简单工厂（静态）" class="headerlink" title="1）简单工厂（静态）"></a>1）简单工厂（静态）</h5><p>案例：生产车辆</p><p>抽象一个汽车基类，或者是接口<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">CarPrototype</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产汽车</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生产奥迪汽车（具体的产品类）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AodeCar</span> <span class="keyword">extends</span> <span class="title">CarPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"生产一辆奥迪汽车。。。。。。。。。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产宝马汽车（具体的产品类）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BaomaCar</span> <span class="keyword">extends</span> <span class="title">CarPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"生产一辆宝马汽车。。。。。。。。。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产红旗汽车（具体的产品类）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HongqiCar</span> <span class="keyword">extends</span> <span class="title">CarPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"生产一辆红旗汽车。。。。。。。。。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汽车工厂（简单工厂类）</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCarFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CarPrototype createCar(<span class="keyword">String</span> type) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"baoma"</span>:<span class="type"></span></span><br><span class="line"><span class="type">                return new BaomaCar</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"aode"</span>:<span class="type"></span></span><br><span class="line"><span class="type">                return new AodeCar</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"hongqi"</span>:<span class="type"></span></span><br><span class="line"><span class="type">                return new HongqiCar</span>();</span><br><span class="line">            <span class="keyword">default</span>:<span class="type"></span></span><br><span class="line"><span class="type">                throw new BaseException</span>(<span class="string">"工厂类无法匹配汽车，没法生产。。。。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试生产汽车</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCarFactory</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CarPrototype carPrototype = <span class="keyword">new</span> SimpleCarFactory().createCar(<span class="string">"baoma"</span>);</span><br><span class="line">        carPrototype.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生产一辆宝马汽车。。。。。。。。。。。。</span><br></pre></td></tr></table></figure><font color="red"><br>特点<br>1 它是一个具体的类，非接口 抽象类。有一个重要的create()方法，利用if或者 switch创建产品并返回。<br>2 create()方法通常是静态的，所以也称之为静态工厂。<br>缺点<br>1 扩展性差（我想增加一种汽车，除了新增一个汽车产品类，还需要修改工厂类方法）<br>2 不同的产品需要不同额外参数的时候 不支持。<br></font><h5 id="2）简单工厂（反射）"><a href="#2）简单工厂（反射）" class="headerlink" title="2）简单工厂（反射）"></a>2）简单工厂（反射）</h5><p>利用反射Class.forName(clz.getName()).newInstance()实现的简单工厂</p><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionCarFactory</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> static &lt;T extends CarPrototype&gt; T createCar(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">prototype</span>) &#123;</span></span><br><span class="line">        T result = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = (T)<span class="class"><span class="keyword">Class</span>.<span class="title">forName</span>(<span class="title">prototype</span>.<span class="title">getName</span>()).<span class="title">newInstance</span>();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            // TODO Auto-generated <span class="keyword">catch</span> block</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试简单工厂（反射）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCarFactory</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单工厂（静态）</span></span><br><span class="line">        <span class="comment">/*CarPrototype carPrototype = new SimpleCarFactory().createCar("baoma");</span></span><br><span class="line"><span class="comment">        carPrototype.produce();*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单工厂（反射）</span></span><br><span class="line">        CarPrototype carPrototype =  ReflectionCarFactory.createCar(AodeCar.class);</span><br><span class="line">        carPrototype.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生产一辆奥迪汽车。。。。。。。。。。。。</span><br></pre></td></tr></table></figure><font color="red"><br>特点<br>1 它也是一个具体的类，非接口 抽象类。但它的create()方法，是利用反射机制生成对象返回，好处是增加一种产品时，不需要修改create()的代码。<br>缺点<br>这种写法粗看牛逼，细想之下，不谈reflection的效率还有以下问题：<br>1 个人觉得不好，因为Class.forName(clz.getName()).newInstance()调用的是无参构造函数生成对象，它和new Object()是一样的性质，而工厂方法应该用于复杂对象的初始化 ，当需要调用有参的构造函数时便无能为力了，这样像为了工厂而工厂。<br>2 不同的产品需要不同额外参数的时候 不支持。<br></font><h5 id="3）多方法工厂（常用）"><a href="#3）多方法工厂（常用）" class="headerlink" title="3）多方法工厂（常用）"></a>3）多方法工厂（常用）</h5><p>不同的产品需要不同额外参数的时候 不支持。<br>而且如果使用时传递的type、Class出错，将不能得到正确的对象，容错率不高。<br>而多方法的工厂模式为不同产品，提供不同的生产方法，使用时 需要哪种产品就调用该种产品的方法，使用方便、容错率高。</p><p>工厂如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManyWayCarFactory</span> &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产奥迪汽车</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CarPrototype <span class="title">createAodeCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AodeCar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产宝马汽车</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CarPrototype <span class="title">createBaomaCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaomaCar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产红旗汽车</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CarPrototype <span class="title">createHongqiCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HongqiCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试多方法工厂（常用）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCarFactory</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单工厂（静态）</span></span><br><span class="line">        <span class="comment">/*CarPrototype carPrototype = new SimpleCarFactory().createCar("baoma");</span></span><br><span class="line"><span class="comment">        carPrototype.produce();*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单工厂（反射）</span></span><br><span class="line">        <span class="comment">/*CarPrototype carPrototype =  ReflectionCarFactory.createCar(AodeCar.class);</span></span><br><span class="line"><span class="comment">        carPrototype.produce();*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 多方法静态工厂(模仿Executor类）</span></span><br><span class="line">        CarPrototype carPrototype =  <span class="keyword">new</span> ManyWayCarFactory().createHongqiCar();</span><br><span class="line">        carPrototype.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生产一辆红旗汽车。。。。。。。。。。。。</span><br></pre></td></tr></table></figure><h5 id="4）普通工厂"><a href="#4）普通工厂" class="headerlink" title="4）普通工厂"></a>4）普通工厂</h5><p>普通工厂就是把简单工厂中具体的工厂类，划分成两层：抽象工厂层+具体的工厂子类层。（一般-&gt;特殊）</p><p>汽车工厂（抽象工厂类），作用就是生产汽车：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">CarFactory</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> CarPrototype <span class="title">create</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产奥迪工厂（具体工厂子类）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AodeFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">CarPrototype</span> create() &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">AodeCar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产宝马工厂（具体工厂子类）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BaomaFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">CarPrototype</span> create() &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">BaomaCar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产红旗工厂（具体工厂子类）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HongqiFactory</span> <span class="keyword">extends</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">CarPrototype</span> create() &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">HongqiCar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试普通工厂<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCarFactory</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单工厂（静态）</span></span><br><span class="line">        <span class="comment">/*CarPrototype carPrototype = new SimpleCarFactory().createCar("baoma");</span></span><br><span class="line"><span class="comment">        carPrototype.produce();*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单工厂（反射）</span></span><br><span class="line">        <span class="comment">/*CarPrototype carPrototype =  ReflectionCarFactory.createCar(AodeCar.class);</span></span><br><span class="line"><span class="comment">        carPrototype.produce();*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 多方法静态工厂(模仿Executor类）</span></span><br><span class="line">        <span class="comment">/*CarPrototype carPrototype =  new ManyWayCarFactory().createHongqiCar();</span></span><br><span class="line"><span class="comment">        carPrototype.produce();*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 普通工厂</span></span><br><span class="line">        CarPrototype carPrototype =  <span class="keyword">new</span> BaomaFactory().create();</span><br><span class="line">        carPrototype.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生产一辆宝马汽车。。。。。。。。。。。。</span><br></pre></td></tr></table></figure><p>普通工厂与简单工厂模式的区别：<br>可以看出，普通工厂模式特点：不仅仅做出来的产品要抽象， 工厂也应该需要抽象。<br>工厂方法使一个产品类的实例化延迟到其具体工厂子类。<br>工厂方法的好处就是更拥抱变化。当需求变化，只需要增删相应的类，不需要修改已有的类。<br>而简单工厂需要修改工厂类的create()方法，多方法静态工厂模式需要增加一个静态方法。<br>缺点：<br>引入抽象工厂层后，每次新增一个具体产品类，也要同时新增一个具体工厂类，所以我更青睐 多方法静态工厂。</p><h5 id="5）抽象工厂"><a href="#5）抽象工厂" class="headerlink" title="5）抽象工厂"></a>5）抽象工厂</h5><p>以上介绍的工厂都是单产品系的。抽象工厂是多产品系 （貌似也有产品家族的说法）。<br>举个例子来说，每个店(工厂)不仅仅生产汽车，还生产零件。 </p><p>生产零件，零件是产品，先抽象一个产品类，零件：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">ComponentsPrototype</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产零件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">produce</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生产车门<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CarDoorComponents</span> <span class="keyword">extends</span> <span class="title">ComponentsPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"生产车门-------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生产发动机<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">EngineComponents</span> <span class="keyword">extends</span> <span class="title">ComponentsPrototype</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void produce() &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"生产发动机-------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抽象汽车工厂（抽象工厂类）<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractCarFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产汽车</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> CarPrototype <span class="title">createCar</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产零件</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ComponentsPrototype <span class="title">createComponents</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试抽象工厂</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单工厂（静态）</span></span><br><span class="line">        <span class="comment">/*CarPrototype carPrototype = new SimpleCarFactory().createCar("baoma");</span></span><br><span class="line"><span class="comment">        carPrototype.produce();*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简单工厂（反射）</span></span><br><span class="line">        <span class="comment">/*CarPrototype carPrototype =  ReflectionCarFactory.createCar(AodeCar.class);</span></span><br><span class="line"><span class="comment">        carPrototype.produce();*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 多方法静态工厂(模仿Executor类）</span></span><br><span class="line">        <span class="comment">/*CarPrototype carPrototype =  new ManyWayCarFactory().createHongqiCar();</span></span><br><span class="line"><span class="comment">        carPrototype.produce();*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 普通工厂</span></span><br><span class="line">        <span class="comment">/*CarPrototype carPrototype =  new BaomaFactory().create();</span></span><br><span class="line"><span class="comment">        carPrototype.produce();*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 抽象工厂</span></span><br><span class="line">        CarPrototype carPrototype =  <span class="keyword">new</span> <span class="type">ChinaCarFactory</span>().createCar();</span><br><span class="line">        carPrototype.produce();</span><br><span class="line">        ComponentsPrototype componentsPrototype =  <span class="keyword">new</span> <span class="type">ChinaCarFactory</span>().createComponents();</span><br><span class="line">        componentsPrototype.produce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生产一辆宝马汽车。。。。。。。。。。。。</span><br><span class="line">生产发动机<span class="comment">-------------</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装NodeJs</title>
      <link href="/2018/04/09/%E5%AE%89%E8%A3%85NodeJs.html"/>
      <url>/2018/04/09/%E5%AE%89%E8%A3%85NodeJs.html</url>
      <content type="html"><![CDATA[<h4 id="下载Node-js"><a href="#下载Node-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h4><p>去官网官网：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><p>下载后 ftp上传或者命令下载压缩包<br><a id="more"></a><br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v8.<span class="number">10.0</span>/<span class="keyword">node</span><span class="title">-v8</span>.<span class="number">10.0</span>-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost <span class="built_in">home</span>]<span class="meta"># tar -xJf node-v8.10.0-linux-x64.tar.xz</span></span><br><span class="line">[root@localhost <span class="built_in">home</span>]<span class="meta"># cd /usr/local/data/node-v8.10</span></span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vi</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure><p>在最后加上：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">NODE_HOME</span>=/usr/local/data/node-v8.10</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$NODE_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>让环境变量生效<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">10</span>]<span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure></p><p>新版本都有自己npm 所以不需要再安装了</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">10</span>]<span class="comment"># node -v</span></span><br><span class="line">v8.<span class="number">10.0</span></span><br><span class="line">[root@localhost <span class="keyword">node</span><span class="title">-v8</span>.<span class="number">10</span>]<span class="comment"># npm -v</span></span><br><span class="line"><span class="number">5.6</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
