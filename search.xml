<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分布式架构 - 微服务框架Dubbo</title>
      <link href="/2019/03/21/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6Dubbo.html"/>
      <url>/2019/03/21/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6Dubbo.html</url>
      
        <content type="html"><![CDATA[<h2 id="Dubbo-的背景"><a href="#Dubbo-的背景" class="headerlink" title="Dubbo 的背景"></a>Dubbo 的背景</h2><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需一个治理系统确保架构有条不紊的演进。<br><a id="more"></a></p><ul><li><strong>单一应用架构：</strong>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。 此时，用于简化增删改查工作量的<span style="color:#CA0C16">数据访问框架（ORM）</span>是关键。</li><li><strong>垂直应用架构：</strong>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。 此时，用于加速前端页面开发的<span style="color:#CA0C16">Web框架（MVC）</span>是关键。</li><li><strong>分布式服务架构：</strong>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。 此时，用于提高业务复用及整合的<span style="color:#CA0C16">分布式服务框架（RPC）</span>是关键。</li><li><strong>流动计算架构：</strong>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。<br>此时，用于提高机器利用率的<span style="color:#CA0C16">资源调度和治理中心（SOA）</span>是关键。</li></ul><h2 id="什么是-Dubbo"><a href="#什么是-Dubbo" class="headerlink" title="什么是 Dubbo"></a>什么是 Dubbo</h2><p>Dubbo 是一个分布式服务框架，致力于提供高性能和透明化的 RPC 远程服务调用方案，SOA 服务治理方案。</p><p>简单的说，dubbo 就是个服务框架，如果没有分布式的需求，其实是不需要用的，只有在分布式的时候，才有 dubbo 这样的分布式服务框架的需求。</p><p><span style="color:#CA0C16">并且本质上是个服务调用，说白了就是个远程服务调用的分布式框架（告别 Web Service 模式中的 wsdl,以服务者与消费者的方式在 dubbo 上注册）。</span></p><p>其核心部分包含:</p><ul><li><strong>1.远程通讯: </strong>提供对多种基于长连接的 NIO 框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。</li><li><strong>2.集群容错: </strong>提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。</li><li><strong>3.自动发现: </strong>基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</li></ul><h2 id="Dubbo能做什么"><a href="#Dubbo能做什么" class="headerlink" title="Dubbo能做什么"></a>Dubbo能做什么</h2><p>具体能做什么：</p><ul><li>透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入。      </li><li>软负载均衡及容错机制，可在内网替代F5等硬件负载均衡器，降低成本，减少单点。</li><li>服务自动注册与发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。</li></ul><p>总结：Dubbo 采用全 Spring 配置方式，透明化接入应用，对应用没有任何 API 侵入，只需用 Spring 加载 Dubbo 的配置即可，Dubbo 基于 Spring 的 Schema 扩展进行加载。</p><h2 id="Dubbo-架构"><a href="#Dubbo-架构" class="headerlink" title="Dubbo 架构"></a>Dubbo 架构</h2><p>Dubbo 已进入 Apache 孵化器。<span class="exturl" data-url="aHR0cDovL2R1YmJvLmFwYWNoZS5vcmcvemgtY24vaW5kZXguaHRtbA==" title="http://dubbo.apache.org/zh-cn/index.html">Apache Dubbo官网地址<i class="fa fa-external-link"></i></span></p><p><img src="http://dubbo.apache.org/img/architecture.png" alt="Dubbo 架构"></p><p>节点角色说明：</p><ul><li>Provider: 暴露服务的服务提供方。</li><li>Consumer: 调用远程服务的服务消费方。</li><li>Registry: 服务注册与发现的注册中心。</li><li>Monitor: 统计服务的调用次调和调用时间的监控中心。</li><li>Container: 服务运行容器。</li></ul><p>调用关系说明：</p><ul><li>0.服务容器负责启动，加载，运行服务提供者。</li><li>1.服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>2.服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>3.注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>4.服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>5.服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ul><p>更多详细教程可参考<span class="exturl" data-url="aHR0cDovL2R1YmJvLmFwYWNoZS5vcmcvemgtY24vZG9jcy91c2VyL3F1aWNrLXN0YXJ0Lmh0bWw=" title="http://dubbo.apache.org/zh-cn/docs/user/quick-start.html">官方文档<i class="fa fa-external-link"></i></span></p><p><span style="color:#CA0C16">持续更新中…</span><br><img src="/images/Come on/Come on5.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 架构 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构 - Spring Cloud</title>
      <link href="/2018/07/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-Spring-Cloud.html"/>
      <url>/2018/07/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-Spring-Cloud.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>Spring Cloud 是 Spring 旗下的项目之一，<span class="exturl" data-url="aHR0cDovL3Byb2plY3RzLnNwcmluZy5pby9zcHJpbmctY2xvdWQv" title="http://projects.spring.io/spring-cloud/">Spring Cloud 官网地址：http://projects.spring.io/spring-cloud/<i class="fa fa-external-link"></i></span></p><p>Spring 最擅长的就是集成，把世界上最好的框架拿过来，集成到自己的项目中。<br><a id="more"></a><br>Spring Cloud 也是一样，它将现在非常流行的一些技术整合到一起，实现了诸如：<span style="color: #f44336">配置管理，服务发现，智能路由，负载均衡，熔断器，控制总线，集群状态等等功能</span>。其主要涉及的组件包括：</p><p>Spring Cloud Netflix</p><ul><li>Eureka：注册中心</li><li>Zuul：服务网关</li><li>Ribbon：负载均衡</li><li>Feign：服务调用</li><li>Hystix：熔断器</li></ul><p>Spring Cloud Config：由 git 存储库支持的集中式外部配置管理。</p><p>Spring Cloud Bus：用于将服务和服务实例与分布式消息相连接的事件总线，在集群中传播状态变化（例如配置更改事件）。<br><span style="color: #f44336">持续更新中…</span><br><img src="/images/Come on/Come on2.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构 - Spring Boot</title>
      <link href="/2018/06/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-Spring-Boot.html"/>
      <url>/2018/06/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84-Spring-Boot.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是SpringBoot"><a href="#什么是SpringBoot" class="headerlink" title="什么是SpringBoot"></a>什么是SpringBoot</h2><p>SpringBoot 是 Spring 项目中的一个子工程，与我们所熟知的 Spring-framework 同属于 spring 的产品。<br><a id="more"></a></p><p>我们可以看到下面的一段介绍：</p><blockquote><p>Takes an opinionated view of building production-ready Spring applications. Spring Boot favors convention over configuration and is designed to get you up and running as quickly as possible.</p></blockquote><p>翻译一下：</p><blockquote><p>用一些固定的方式来构建生产级别的spring应用。Spring Boot 推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。</p></blockquote><p>其实人们把 Spring Boot 称为搭建程序的<span style="color: #CA0C16">脚手架</span>。其最主要作用就是帮我们快速的构建庞大的 spring 项目，并且尽可能的减少一切 xml 配置，做到开箱即用，迅速上手，让我们关注与业务而非配置。</p><h2 id="为什么要学习SpringBoot"><a href="#为什么要学习SpringBoot" class="headerlink" title="为什么要学习SpringBoot"></a>为什么要学习SpringBoot</h2><p>java 一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能 Python 程序员已经把功能写好了，究其原因注意是两点：</p><ul><li>复杂的配置</li></ul><p>项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以写配置挤占了写应用程序逻辑的时间。</p><ul><li>一个是混乱的依赖管理。</li></ul><p>项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。</p><p>我们可以使用 SpringBoot 创建 java 应用，并使用<code>java –jar</code>启动它，就能得到一个生产级别的 web 工程。</p><h2 id="SpringBoot的优点"><a href="#SpringBoot的优点" class="headerlink" title="SpringBoot的优点"></a>SpringBoot的优点</h2><p>Spring Boot 主要目标是：</p><ul><li>为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验。</li><li>开箱即用（启动器 starter-其实就是 SpringBoot 提供的一个 jar 包），但通过自己设置参数（.properties），即可快速摆脱这种方式。</li><li>提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等。</li><li>绝对没有代码生成，也无需 XML 配置。</li></ul><p>更多细节，大家可以到<span class="exturl" data-url="aHR0cDovL3Byb2plY3RzLnNwcmluZy5pby9zcHJpbmctYm9vdC8=" title="http://projects.spring.io/spring-boot/">Spring boot 官网<i class="fa fa-external-link"></i></span>查看。</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>创建 maven 名为 springboot-demo 的 Spring Boot 工程。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写-controller"><a href="#编写-controller" class="headerlink" title="编写 controller"></a>编写 controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello, spring boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多技能"><a href="#更多技能" class="headerlink" title="更多技能"></a>更多技能</h2><ul><li>Spring boot 整合 mybatis</li><li>Spring boot 整合 jpa</li><li>Spring boot 整合 redis</li><li>Spring boot 整合 MQ</li><li>Spring boot 整合 …</li></ul><p>更多细节，大家可以到<span class="exturl" data-url="aHR0cDovL3Byb2plY3RzLnNwcmluZy5pby9zcHJpbmctYm9vdC8=" title="http://projects.spring.io/spring-boot/">Spring boot 官网<i class="fa fa-external-link"></i></span>查看。</p><p><img src="/images/Come on/Come on11.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 微服务架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统 - 内存数据库Redis</title>
      <link href="/2018/05/16/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F-%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93Redis.html"/>
      <url>/2018/05/16/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F-%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93Redis.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-NoSql"><a href="#什么是-NoSql" class="headerlink" title="什么是 NoSql"></a>什么是 NoSql</h2><p>NoSQL，即 Not-Only SQL，泛指非关系型的数据库。它是为了解决<span style="color: #f44336">高并发、高可用、高可扩展、大数据存储问题</span>而产生的数据库解决方案。<br><a id="more"></a><br>NoSQL 可以作为关系型数据库的良好补充，但是不能替代关系型数据库。</p><h2 id="NoSql-数据库分类"><a href="#NoSql-数据库分类" class="headerlink" title="NoSql 数据库分类"></a>NoSql 数据库分类</h2><p><strong>键值(Key-Value)存储数据库</strong><br>相关产品： Tokyo Cabinet/Tyrant、<span style="color: #f44336">Redis</span>、Voldemort、Berkeley DB<br>典型应用： 内容缓存，主要用于处理大量数据的高访问负载。<br>数据模型： 一系列键值对<br>优势： 快速查询<br>劣势： 存储的数据缺少结构化</p><p><strong>列存储数据库</strong><br>相关产品：Cassandra, <span style="color: #f44336">HBase</span>, Riak<br>典型应用：分布式的文件系统<br>数据模型：以列簇式存储，将同一列数据存在一起<br>优势：查找速度快，可扩展性强，更容易进行分布式扩展<br>劣势：功能相对局限</p><p><strong>文档型数据库</strong><br>相关产品：CouchDB、<span style="color: #f44336">MongoDB</span><br>典型应用：Web 应用（与 Key-Value 类似，Value 是结构化的）<br>数据模型： 一系列键值对<br>优势：数据结构要求不严格<br>劣势：查询性能不高，而且缺乏统一的查询语法</p><p><strong>图形(Graph)数据库</strong><br>相关数据库：Neo4J、InfoGrid、Infinite Graph<br>典型应用：社交网络<br>数据模型：图结构<br>优势：利用图结构相关算法。<br>劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</p><h2 id="Redis-是什么"><a href="#Redis-是什么" class="headerlink" title="Redis 是什么"></a>Redis 是什么</h2><p>Redis 是用 C 语言开发的一个开源的高性能键值对（key-value）数据库。它通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止 Redis 支持的键值数据类型如下：</p><ul><li>字符串类型</li><li>散列类型</li><li>列表类型</li><li>集合类型</li><li>有序集合类型</li></ul><h2 id="Redis-的应用场景"><a href="#Redis-的应用场景" class="headerlink" title="Redis 的应用场景"></a>Redis 的应用场景</h2><ul><li><span style="color: #f44336">缓存（数据查询、短连接、新闻内容、商品内容等等）。</span></li><li>分布式集群架构中的 session 分离。</li><li>聊天室的在线好友列表。</li><li>任务队列。（秒杀、抢购、12306 等等）</li><li>应用排行榜。</li><li>网站访问统计。</li><li>数据过期处理（可以精确到毫秒）</li></ul><p><span style="color: #f44336">持续更新中…</span></p><p><img src="/images/Come on/Come on4.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 系统 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式架构 - Nginx</title>
      <link href="/2018/04/15/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84-Nginx.html"/>
      <url>/2018/04/15/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84-Nginx.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Nginx"><a href="#什么是-Nginx" class="headerlink" title="什么是 Nginx"></a>什么是 Nginx</h2><p>Nginx 是俄罗斯人编写的一款<span style="color: #f44336">高性能的 HTTP 和反向代理服务器</span>。</p><p>在高连接并发的情况下，它能够支持高达 <span style="color: #f44336">50000 个并发</span>连接数的响应，但是内存、CPU 等系统资源消耗却很低，运行很稳定。</p><a id="more"></a><h2 id="Nginx-的优势"><a href="#Nginx-的优势" class="headerlink" title="Nginx 的优势"></a>Nginx 的优势</h2><p>选择 Nginx 的理由也很简单：</p><ul><li>第一，它可以支持5W高并发连接；</li><li>第二，内存消耗少；</li><li>第三，成本低，如果采用 F5、NetScaler 等硬件负载均衡设备的话，需要大几十万。而 Nginx 是开源的，可以免费使用并且能用于商业用途。</li></ul><h2 id="分布式架构中的作用"><a href="#分布式架构中的作用" class="headerlink" title="分布式架构中的作用"></a>分布式架构中的作用</h2><p>最常用的有三项：</p><ul><li><strong>路由功能</strong>（与微服务对应）：域名/路径，进行路由选择后台服务器；</li><li><strong>负载功能</strong>（与高并发高可用对应）：对后台服务器集群进行负载；</li><li><strong>静态服务器</strong>（比 Tomcat 性能高很多）：在 mvvm 模式中，充当文件读取职责。</li></ul><blockquote><p>总结：实际使用中，这三项功用，会混合使用。比如先分离动静，再路由服务，再负载机器。</p></blockquote><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p><strong>正向代理</strong>：客户端自己请求出现困难。客户请了一个代理，来代自己做事，就叫代理。比如代理律师，代购，政府机关办事的代理人等等。<br><strong>反向代理</strong>：服务端推出的一个代理招牌。</p><h2 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h2><h3 id="源码编译方式"><a href="#源码编译方式" class="headerlink" title="源码编译方式"></a>源码编译方式</h3><p>一般系统中已经装了了 make 和 g++，无须再装。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装 make</span><br><span class="line">yum -y install autoconf automake make</span><br><span class="line"><span class="meta">#</span> 安装 g++</span><br><span class="line">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure></p><p>安装nginx依赖的库<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装 pcre </span><br><span class="line">yum -y install pcre pcre-devel</span><br><span class="line"><span class="meta">#</span> 安装 zlib </span><br><span class="line">yum -y install zlib zlib-devel</span><br><span class="line"><span class="meta">#</span> 安装 openssl </span><br><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure></p><p><span class="exturl" data-url="aHR0cDovL25naW54Lm9yZy9lbi9kb3dubG9hZC5odG1s" title="http://nginx.org/en/download.html">Nginx 官方下载地址<i class="fa fa-external-link"></i></span></p><p>安装 Nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 下载 Nginx</span><br><span class="line">wget  http://nginx.org/download/nginx-1.16.0.tar.gz</span><br><span class="line"># 解压 Nginx</span><br><span class="line">tar -zxvf nginx-1.16.0.tar.gz</span><br><span class="line">cd nginx-1.16.0</span><br><span class="line"># 安装 HTTPS 模块</span><br><span class="line">./configure   --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line"># 安装</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><code>--prefix</code> 指定安装目录<br><code>--with-http_ssl_module</code> 安装 HTTPS 模块<br><code>make</code> 编译<br><code>make install</code> 安装</p><h3 id="yum-方式"><a href="#yum-方式" class="headerlink" title="yum 方式"></a>yum 方式</h3><p>Linux 系统下：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum扩展源</span></span><br><span class="line">yum <span class="keyword">install</span> epel-release -y</span><br><span class="line">yum <span class="keyword">install</span> nginx -y</span><br></pre></td></tr></table></figure></p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li>Conf：配置文件</li><li>Html：网页文件</li><li>Logs：日志文件</li><li>Sbin：二进制程序</li></ul><h3 id="启停命令"><a href="#启停命令" class="headerlink" title="启停命令"></a>启停命令</h3><p><code>./nginx -c nginx.conf</code>的文件。如果不指定，默认为 NGINX_HOME/conf/nginx.conf<br><code>./nginx -s stop</code>  停止<br><code>./nginx -s quit</code> 退出<br><code>./nginx -s reload</code> 重新加载 nginx.conf</p><h3 id="发送信号的方式"><a href="#发送信号的方式" class="headerlink" title="发送信号的方式"></a>发送信号的方式</h3><p><code>kill -QUIT 进程号</code> 安全停止<br><code>kill -TERM 进程号</code> 立即停止</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="Nginx-全局属性的配置"><a href="#Nginx-全局属性的配置" class="headerlink" title="Nginx 全局属性的配置"></a>Nginx 全局属性的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>user</strong>：主模块命令， 指定Nginx的worker进程运行用户以及用户组，默认由 nobody 账号运行。<br><strong>worker_processes</strong>: 指定 Nginx 要开启的进程数。<br><strong>error_log</strong>：用来定义全局错设日志文件的路径和日志名称。<br>日志输出级别有 debug，info，notice，warn，error，crit 可供选择，其中 debug 输出日志最为详细，而 crit（严重）输出日志最少。默认是 error。</p><p><strong>pid</strong>: 用来指定进程 id 的存储文件位置。<br><strong>event</strong>：设定 nginx 的工作模式及连接数上限，其中参数 use 用来指定 nginx 的工作模式（这里是 epoll，epoll 是<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/aWU9VVRGLTgmYW1wO3dkPSVFNSVBNCU5QSVFOCVCNyVBRiVFNSVBNCU4RCVFNyU5NCVBOCUyMElP" title="https://www.baidu.com/s?ie=UTF-8&amp;wd=%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%20IO">多路复用 IO(I/O Multiplexing)<i class="fa fa-external-link"></i></span>中的一种方式）,<br>nginx 支持的工作模式有 select ,poll,kqueue,epoll,rtsig,/dev/poll。<br>其中 select 和 poll 都是标准的工作模式，kqueue 和 epoll 是高效的工作模式，对于 linux 系统，epoll 是首选。</p><p><strong>worker_connection</strong>：是设置 nginx 每个进程最大的连接数，默认是1024，所以nginx最大的连接数 max_client=worker_processes * worker_connections。<br>进程最大连接数受到系统最大打开文件数的限制，需要设置 ulimit。</p><h3 id="http-服务器相关属性的配置"><a href="#http-服务器相关属性的配置" class="headerlink" title="http 服务器相关属性的配置"></a>http 服务器相关属性的配置</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    <span class="keyword">include</span>       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  '<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] <span class="string">"$request"</span> '</span><br><span class="line">    #                  '<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> <span class="string">"$http_referer"</span> '</span><br><span class="line">    #                  '<span class="string">"$http_user_agent"</span> <span class="string">"$http_x_forwarded_for"</span>';</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.<span class="keyword">log</span>  main;</span><br><span class="line"></span><br><span class="line">    sendfile        <span class="keyword">on</span>;</span><br><span class="line">    #tcp_nopush     <span class="keyword">on</span>;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  <span class="keyword">on</span>;</span><br></pre></td></tr></table></figure><p><strong>include</strong>：主模块命令，对配置文件所包含文件的设定，减少主配置文件的复杂度，相当于把部分设置放在别的地方，然后在包含进来，保持主配置文件的简洁。<br><strong>default_type</strong>：默认文件类型，当文件类型未定义时候就使用这类设置的。<br><strong>log_format</strong>：设定日志格式。<br><strong>sendfile</strong>：开启高效文件传输模式（zero copy 方式），避免内核缓冲区数据和用户缓冲区数据之间的拷贝。<br><strong>tcp_nopush</strong>：开启 TCP_NOPUSH 套接字（sendfile 开启时有用）<br><strong>keepalive_timeout</strong>：客户端连接超时时间<br><strong>gzip</strong>：设置是否开启 gzip 模块</p><h3 id="server-段虚拟主机的配置"><a href="#server-段虚拟主机的配置" class="headerlink" title="server 段虚拟主机的配置"></a>server 段虚拟主机的配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">    <span class="comment">#    root           html;</span></span><br><span class="line">    <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">    <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">    <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">    <span class="comment"># concurs with nginx's one</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">    <span class="comment">#    deny  all;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>listen</strong>：虚拟主机的服务端口<br><strong>server_name</strong>：用来指定ip或者域名，多个域名用逗号分开<br><strong>charset</strong>：设置字符编码<br><strong>location /</strong>：默认请求<br>    <strong>root</strong>：虚拟主机的网页根目录<br>    <strong>index</strong>：默认访问首页文件<br><strong>error_page</strong>：定义错误提示页面<br><strong>location ~ .php$</strong>：PHP 脚本请求全部转发到 FastCGI 处理.，使用FastCGI默认配置。<br><strong>location ~ /.ht</strong>：禁止访问 .htxxx 文件</p><h2 id="Nginx-日志描述"><a href="#Nginx-日志描述" class="headerlink" title="Nginx 日志描述"></a>Nginx 日志描述</h2><p>通过访问日志，你可以得到用户地域来源、跳转来源、使用终端、某个URL访问量等相关信息；<br>通过错误日志，你可以得到系统某个服务或server的性能瓶颈等。</p><p>因此，将日志好好利用，你可以得到很多有价值的信息。 </p><p>日志格式<br>打开nginx.conf配置文件：<code>vi /usr/local/nginx/conf/nginx.conf</code><br>日志部分内容：<code>#access_log  logs/access.log  main;</code></p><p>日志生成的到 Nginx 根目录 logs/access.log 文件，默认使用 <code>main</code> 日志格式，也可以自定义格式。</p><p align="center" style="font-weight: bold;">参数明细表</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>$remote_addr</td><td>客户端的ip地址(代理服务器，显示代理服务ip)</td></tr><tr><td>$remote_user</td><td>用于记录远程客户端的用户名称（一般为“-”）</td></tr><tr><td>$time_local</td><td>用于记录访问时间和时区</td></tr><tr><td>$request</td><td>用于记录请求的url以及请求方法</td></tr><tr><td>$status</td><td>响应状态码，例如：200成功、404页面找不到等。</td></tr><tr><td>$body_bytes_sent</td><td>给客户端发送的文件主体内容字节数</td></tr><tr><td>$http_user_agent</td><td>用户所使用的代理（一般为浏览器）</td></tr><tr><td>$http_x_forwarded_for</td><td>可以记录客户端IP，通过代理服务器来记录客户端的ip地址</td></tr><tr><td>$http_referer</td><td>可以记录用户是从哪个链接访问过来的</td></tr></tbody></table><p>查看日志命令 <code>tail -f /usr/local/nginx/logs/access.log</code><br><span style="color: #f44336">持续更新中…</span></p><p><img src="/images/Come on/Come on3.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 架构 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
